// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/EstebanForeroM/backendUserAPIV2/ent/cart"
	"github.com/EstebanForeroM/backendUserAPIV2/ent/order"
	"github.com/EstebanForeroM/backendUserAPIV2/ent/predicate"
	"github.com/EstebanForeroM/backendUserAPIV2/ent/product"
	"github.com/google/uuid"
)

// ProductUpdate is the builder for updating Product entities.
type ProductUpdate struct {
	config
	hooks    []Hook
	mutation *ProductMutation
}

// Where appends a list predicates to the ProductUpdate builder.
func (pu *ProductUpdate) Where(ps ...predicate.Product) *ProductUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetPid sets the "pid" field.
func (pu *ProductUpdate) SetPid(u uuid.UUID) *ProductUpdate {
	pu.mutation.SetPid(u)
	return pu
}

// SetNillablePid sets the "pid" field if the given value is not nil.
func (pu *ProductUpdate) SetNillablePid(u *uuid.UUID) *ProductUpdate {
	if u != nil {
		pu.SetPid(*u)
	}
	return pu
}

// SetQuantity sets the "quantity" field.
func (pu *ProductUpdate) SetQuantity(u uint8) *ProductUpdate {
	pu.mutation.ResetQuantity()
	pu.mutation.SetQuantity(u)
	return pu
}

// SetNillableQuantity sets the "quantity" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableQuantity(u *uint8) *ProductUpdate {
	if u != nil {
		pu.SetQuantity(*u)
	}
	return pu
}

// AddQuantity adds u to the "quantity" field.
func (pu *ProductUpdate) AddQuantity(u int8) *ProductUpdate {
	pu.mutation.AddQuantity(u)
	return pu
}

// SetOrdersID sets the "orders" edge to the Order entity by ID.
func (pu *ProductUpdate) SetOrdersID(id uuid.UUID) *ProductUpdate {
	pu.mutation.SetOrdersID(id)
	return pu
}

// SetNillableOrdersID sets the "orders" edge to the Order entity by ID if the given value is not nil.
func (pu *ProductUpdate) SetNillableOrdersID(id *uuid.UUID) *ProductUpdate {
	if id != nil {
		pu = pu.SetOrdersID(*id)
	}
	return pu
}

// SetOrders sets the "orders" edge to the Order entity.
func (pu *ProductUpdate) SetOrders(o *Order) *ProductUpdate {
	return pu.SetOrdersID(o.ID)
}

// SetCartsID sets the "carts" edge to the Cart entity by ID.
func (pu *ProductUpdate) SetCartsID(id uuid.UUID) *ProductUpdate {
	pu.mutation.SetCartsID(id)
	return pu
}

// SetNillableCartsID sets the "carts" edge to the Cart entity by ID if the given value is not nil.
func (pu *ProductUpdate) SetNillableCartsID(id *uuid.UUID) *ProductUpdate {
	if id != nil {
		pu = pu.SetCartsID(*id)
	}
	return pu
}

// SetCarts sets the "carts" edge to the Cart entity.
func (pu *ProductUpdate) SetCarts(c *Cart) *ProductUpdate {
	return pu.SetCartsID(c.ID)
}

// Mutation returns the ProductMutation object of the builder.
func (pu *ProductUpdate) Mutation() *ProductMutation {
	return pu.mutation
}

// ClearOrders clears the "orders" edge to the Order entity.
func (pu *ProductUpdate) ClearOrders() *ProductUpdate {
	pu.mutation.ClearOrders()
	return pu
}

// ClearCarts clears the "carts" edge to the Cart entity.
func (pu *ProductUpdate) ClearCarts() *ProductUpdate {
	pu.mutation.ClearCarts()
	return pu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *ProductUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *ProductUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *ProductUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *ProductUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pu *ProductUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(product.Table, product.Columns, sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.Pid(); ok {
		_spec.SetField(product.FieldPid, field.TypeUUID, value)
	}
	if value, ok := pu.mutation.Quantity(); ok {
		_spec.SetField(product.FieldQuantity, field.TypeUint8, value)
	}
	if value, ok := pu.mutation.AddedQuantity(); ok {
		_spec.AddField(product.FieldQuantity, field.TypeUint8, value)
	}
	if pu.mutation.OrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   product.OrdersTable,
			Columns: []string{product.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.OrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   product.OrdersTable,
			Columns: []string{product.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.CartsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   product.CartsTable,
			Columns: []string{product.CartsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cart.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.CartsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   product.CartsTable,
			Columns: []string{product.CartsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cart.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{product.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// ProductUpdateOne is the builder for updating a single Product entity.
type ProductUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProductMutation
}

// SetPid sets the "pid" field.
func (puo *ProductUpdateOne) SetPid(u uuid.UUID) *ProductUpdateOne {
	puo.mutation.SetPid(u)
	return puo
}

// SetNillablePid sets the "pid" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillablePid(u *uuid.UUID) *ProductUpdateOne {
	if u != nil {
		puo.SetPid(*u)
	}
	return puo
}

// SetQuantity sets the "quantity" field.
func (puo *ProductUpdateOne) SetQuantity(u uint8) *ProductUpdateOne {
	puo.mutation.ResetQuantity()
	puo.mutation.SetQuantity(u)
	return puo
}

// SetNillableQuantity sets the "quantity" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableQuantity(u *uint8) *ProductUpdateOne {
	if u != nil {
		puo.SetQuantity(*u)
	}
	return puo
}

// AddQuantity adds u to the "quantity" field.
func (puo *ProductUpdateOne) AddQuantity(u int8) *ProductUpdateOne {
	puo.mutation.AddQuantity(u)
	return puo
}

// SetOrdersID sets the "orders" edge to the Order entity by ID.
func (puo *ProductUpdateOne) SetOrdersID(id uuid.UUID) *ProductUpdateOne {
	puo.mutation.SetOrdersID(id)
	return puo
}

// SetNillableOrdersID sets the "orders" edge to the Order entity by ID if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableOrdersID(id *uuid.UUID) *ProductUpdateOne {
	if id != nil {
		puo = puo.SetOrdersID(*id)
	}
	return puo
}

// SetOrders sets the "orders" edge to the Order entity.
func (puo *ProductUpdateOne) SetOrders(o *Order) *ProductUpdateOne {
	return puo.SetOrdersID(o.ID)
}

// SetCartsID sets the "carts" edge to the Cart entity by ID.
func (puo *ProductUpdateOne) SetCartsID(id uuid.UUID) *ProductUpdateOne {
	puo.mutation.SetCartsID(id)
	return puo
}

// SetNillableCartsID sets the "carts" edge to the Cart entity by ID if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableCartsID(id *uuid.UUID) *ProductUpdateOne {
	if id != nil {
		puo = puo.SetCartsID(*id)
	}
	return puo
}

// SetCarts sets the "carts" edge to the Cart entity.
func (puo *ProductUpdateOne) SetCarts(c *Cart) *ProductUpdateOne {
	return puo.SetCartsID(c.ID)
}

// Mutation returns the ProductMutation object of the builder.
func (puo *ProductUpdateOne) Mutation() *ProductMutation {
	return puo.mutation
}

// ClearOrders clears the "orders" edge to the Order entity.
func (puo *ProductUpdateOne) ClearOrders() *ProductUpdateOne {
	puo.mutation.ClearOrders()
	return puo
}

// ClearCarts clears the "carts" edge to the Cart entity.
func (puo *ProductUpdateOne) ClearCarts() *ProductUpdateOne {
	puo.mutation.ClearCarts()
	return puo
}

// Where appends a list predicates to the ProductUpdate builder.
func (puo *ProductUpdateOne) Where(ps ...predicate.Product) *ProductUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *ProductUpdateOne) Select(field string, fields ...string) *ProductUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Product entity.
func (puo *ProductUpdateOne) Save(ctx context.Context) (*Product, error) {
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *ProductUpdateOne) SaveX(ctx context.Context) *Product {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *ProductUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *ProductUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (puo *ProductUpdateOne) sqlSave(ctx context.Context) (_node *Product, err error) {
	_spec := sqlgraph.NewUpdateSpec(product.Table, product.Columns, sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Product.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, product.FieldID)
		for _, f := range fields {
			if !product.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != product.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.Pid(); ok {
		_spec.SetField(product.FieldPid, field.TypeUUID, value)
	}
	if value, ok := puo.mutation.Quantity(); ok {
		_spec.SetField(product.FieldQuantity, field.TypeUint8, value)
	}
	if value, ok := puo.mutation.AddedQuantity(); ok {
		_spec.AddField(product.FieldQuantity, field.TypeUint8, value)
	}
	if puo.mutation.OrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   product.OrdersTable,
			Columns: []string{product.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.OrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   product.OrdersTable,
			Columns: []string{product.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.CartsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   product.CartsTable,
			Columns: []string{product.CartsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cart.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.CartsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   product.CartsTable,
			Columns: []string{product.CartsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cart.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Product{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{product.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
