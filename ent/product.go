// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/EstebanForeroM/backendUserAPIV2/ent/cart"
	"github.com/EstebanForeroM/backendUserAPIV2/ent/order"
	"github.com/EstebanForeroM/backendUserAPIV2/ent/product"
	"github.com/google/uuid"
)

// Product is the model entity for the Product schema.
type Product struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Pid holds the value of the "pid" field.
	Pid uuid.UUID `json:"pid,omitempty"`
	// Quantity holds the value of the "quantity" field.
	Quantity uint8 `json:"quantity,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProductQuery when eager-loading is set.
	Edges          ProductEdges `json:"edges"`
	cart_products  *uuid.UUID
	order_products *uuid.UUID
	selectValues   sql.SelectValues
}

// ProductEdges holds the relations/edges for other nodes in the graph.
type ProductEdges struct {
	// Orders holds the value of the orders edge.
	Orders *Order `json:"orders,omitempty"`
	// Carts holds the value of the carts edge.
	Carts *Cart `json:"carts,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// OrdersOrErr returns the Orders value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProductEdges) OrdersOrErr() (*Order, error) {
	if e.Orders != nil {
		return e.Orders, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: order.Label}
	}
	return nil, &NotLoadedError{edge: "orders"}
}

// CartsOrErr returns the Carts value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProductEdges) CartsOrErr() (*Cart, error) {
	if e.Carts != nil {
		return e.Carts, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: cart.Label}
	}
	return nil, &NotLoadedError{edge: "carts"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Product) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case product.FieldID, product.FieldQuantity:
			values[i] = new(sql.NullInt64)
		case product.FieldPid:
			values[i] = new(uuid.UUID)
		case product.ForeignKeys[0]: // cart_products
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case product.ForeignKeys[1]: // order_products
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Product fields.
func (pr *Product) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case product.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pr.ID = int(value.Int64)
		case product.FieldPid:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field pid", values[i])
			} else if value != nil {
				pr.Pid = *value
			}
		case product.FieldQuantity:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field quantity", values[i])
			} else if value.Valid {
				pr.Quantity = uint8(value.Int64)
			}
		case product.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field cart_products", values[i])
			} else if value.Valid {
				pr.cart_products = new(uuid.UUID)
				*pr.cart_products = *value.S.(*uuid.UUID)
			}
		case product.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field order_products", values[i])
			} else if value.Valid {
				pr.order_products = new(uuid.UUID)
				*pr.order_products = *value.S.(*uuid.UUID)
			}
		default:
			pr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Product.
// This includes values selected through modifiers, order, etc.
func (pr *Product) Value(name string) (ent.Value, error) {
	return pr.selectValues.Get(name)
}

// QueryOrders queries the "orders" edge of the Product entity.
func (pr *Product) QueryOrders() *OrderQuery {
	return NewProductClient(pr.config).QueryOrders(pr)
}

// QueryCarts queries the "carts" edge of the Product entity.
func (pr *Product) QueryCarts() *CartQuery {
	return NewProductClient(pr.config).QueryCarts(pr)
}

// Update returns a builder for updating this Product.
// Note that you need to call Product.Unwrap() before calling this method if this Product
// was returned from a transaction, and the transaction was committed or rolled back.
func (pr *Product) Update() *ProductUpdateOne {
	return NewProductClient(pr.config).UpdateOne(pr)
}

// Unwrap unwraps the Product entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pr *Product) Unwrap() *Product {
	_tx, ok := pr.config.driver.(*txDriver)
	if !ok {
		panic("ent: Product is not a transactional entity")
	}
	pr.config.driver = _tx.drv
	return pr
}

// String implements the fmt.Stringer.
func (pr *Product) String() string {
	var builder strings.Builder
	builder.WriteString("Product(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pr.ID))
	builder.WriteString("pid=")
	builder.WriteString(fmt.Sprintf("%v", pr.Pid))
	builder.WriteString(", ")
	builder.WriteString("quantity=")
	builder.WriteString(fmt.Sprintf("%v", pr.Quantity))
	builder.WriteByte(')')
	return builder.String()
}

// Products is a parsable slice of Product.
type Products []*Product
