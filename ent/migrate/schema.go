// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// CartsColumns holds the columns for the "carts" table.
	CartsColumns = []*schema.Column{
		{Name: "oid", Type: field.TypeUUID},
		{Name: "total_price", Type: field.TypeFloat32, Default: 0},
		{Name: "user_cart", Type: field.TypeString, Unique: true, Nullable: true},
	}
	// CartsTable holds the schema information for the "carts" table.
	CartsTable = &schema.Table{
		Name:       "carts",
		Columns:    CartsColumns,
		PrimaryKey: []*schema.Column{CartsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "carts_users_cart",
				Columns:    []*schema.Column{CartsColumns[2]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// OrdersColumns holds the columns for the "orders" table.
	OrdersColumns = []*schema.Column{
		{Name: "oid", Type: field.TypeUUID},
		{Name: "ordered_at", Type: field.TypeTime},
		{Name: "delivery_adress", Type: field.TypeString},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"Pending", "In delivery", "Delivered"}, Default: "Pending"},
		{Name: "user_orders", Type: field.TypeString, Nullable: true},
	}
	// OrdersTable holds the schema information for the "orders" table.
	OrdersTable = &schema.Table{
		Name:       "orders",
		Columns:    OrdersColumns,
		PrimaryKey: []*schema.Column{OrdersColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "orders_users_orders",
				Columns:    []*schema.Column{OrdersColumns[4]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// ProductsColumns holds the columns for the "products" table.
	ProductsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "pid", Type: field.TypeUUID},
		{Name: "quantity", Type: field.TypeUint8, Default: 1},
		{Name: "cart_products", Type: field.TypeUUID, Nullable: true},
		{Name: "order_products", Type: field.TypeUUID, Nullable: true},
	}
	// ProductsTable holds the schema information for the "products" table.
	ProductsTable = &schema.Table{
		Name:       "products",
		Columns:    ProductsColumns,
		PrimaryKey: []*schema.Column{ProductsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "products_carts_products",
				Columns:    []*schema.Column{ProductsColumns[3]},
				RefColumns: []*schema.Column{CartsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "products_orders_products",
				Columns:    []*schema.Column{ProductsColumns[4]},
				RefColumns: []*schema.Column{OrdersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "name", Type: field.TypeString, Size: 25},
		{Name: "email", Type: field.TypeString, Unique: true},
		{Name: "role", Type: field.TypeEnum, Enums: []string{"user", "admin"}, Default: "user"},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		CartsTable,
		OrdersTable,
		ProductsTable,
		UsersTable,
	}
)

func init() {
	CartsTable.ForeignKeys[0].RefTable = UsersTable
	OrdersTable.ForeignKeys[0].RefTable = UsersTable
	ProductsTable.ForeignKeys[0].RefTable = CartsTable
	ProductsTable.ForeignKeys[1].RefTable = OrdersTable
}
